# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ZyWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

import cv2
import rawpy
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QStringListModel
from BL_demo import Demo


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(659, 501)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(70, 20, 471, 411))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        # 实例化列表模型，添加数据
        self.slm = QStringListModel()
        self.qList = []
        self.fileshowlist = QtWidgets.QListView(self.gridLayoutWidget)
        self.fileshowlist.setStyleSheet("")
        self.fileshowlist.setObjectName("fileshowlist")
        # 设置模型列表视图，加载数据列表
        self.slm.setStringList(self.qList)
        # 设置列表视图的模型
        self.fileshowlist.setModel(self.slm)
        self.gridLayout.addWidget(self.fileshowlist, 9, 0, 1, 5)
        #进度条
        self.pv = 0
        self.progressBar = QtWidgets.QProgressBar(self.gridLayoutWidget)
#         self.progressBar.setStyleSheet("\n"
# "color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.gridLayout.addWidget(self.progressBar, 6, 2, 1, 1)
        self.filechooseButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.filechooseButton.setStyleSheet("background-color: rgb(255, 170, 255);\n"
"alternate-background-color: rgb(85, 255, 127);\n"
"background-color: rgb(255, 255, 255);")
        self.filechooseButton.setObjectName("filechooseButton")
        self.gridLayout.addWidget(self.filechooseButton, 0, 0, 1, 1)
        self.GenerateButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.GenerateButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.GenerateButton.setObjectName("GenerateButton")
        self.gridLayout.addWidget(self.GenerateButton, 1, 0, 1, 1)
        self.filepathname = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.filepathname.setStyleSheet("")
        self.filepathname.setObjectName("filepathname")
        self.gridLayout.addWidget(self.filepathname, 0, 2, 1, 3)
        self.comboBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout.addWidget(self.comboBox, 1, 2, 1, 1)
        self.judgeButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.judgeButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.judgeButton.setObjectName("judgeButton")
        self.gridLayout.addWidget(self.judgeButton, 6, 0, 1, 1)
        self.deleteButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.deleteButton.setStyleSheet("\n"
"background-color: rgb(255, 255, 255);")
        self.deleteButton.setObjectName("deleteButton")
        self.gridLayout.addWidget(self.deleteButton, 7, 3, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_2.setStyleSheet("")
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 7, 0, 1, 1)
        self.score = QtWidgets.QSpinBox(self.gridLayoutWidget)
        self.score.setMaximumSize(QtCore.QSize(186, 16777215))
        self.score.setObjectName("score")
        self.gridLayout.addWidget(self.score, 7, 2, 1, 1)
        self.StateShowLabel = QtWidgets.QLabel(self.gridLayoutWidget)
        self.StateShowLabel.setMinimumSize(QtCore.QSize(153, 23))
        self.StateShowLabel.setObjectName("StateShowLabel")
        self.gridLayout.addWidget(self.StateShowLabel, 6, 3, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 659, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu.menuAction())
        #分数列表
        self.scorelist = []
        #当前文件夹路径
        self.filepath = ""
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        #函数
        self.filechooseButton.clicked.connect(self.msg)
        self.judgeButton.clicked.connect(self.judge)
        self.deleteButton.clicked.connect(self.delete)
        self.GenerateButton.clicked.connect(self.generate)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.filechooseButton.setText(_translate("MainWindow", "选择文件夹"))
        self.GenerateButton.setText(_translate("MainWindow", "生成缩略图"))
        self.comboBox.setItemText(0, _translate("MainWindow", "png"))
        self.comboBox.setItemText(1, _translate("MainWindow", "jpg"))
        self.judgeButton.setText(_translate("MainWindow", "开始打分"))
        self.deleteButton.setText(_translate("MainWindow", "删除"))
        self.label_2.setText(_translate("MainWindow", "设置筛选阈值"))
        self.StateShowLabel.setText(_translate("MainWindow", ""))
        self.menu.setTitle(_translate("MainWindow", "菜单"))

    def msg(self, Filepath):
        m = QtWidgets.QFileDialog.getExistingDirectory(None, "选取文件夹", "C:/")  # 起始路径
        self.filepath = m
        self.filepathname.setText(m)
        self.qList=self.pngfilter(os.listdir(m))
        print(self.qList)
        if len(self.qList) == 0:
            self.slm.setStringList(["请选择有缩略图片的文件夹！"])
        else:
            self.slm.setStringList(self.qList)
        # self.fileshowlist.

        self.fileshowlist.setModel(self.slm)

    def judge(self):
        self.StateShowLabel.setText("打分中！")
        model = Demo() #spaq模型
        step = 100 / len(self.qList)
        #给图片打分
        for i in range(len(self.qList)):
            # print(self.filepath+self.qList[i])
            model.get_image(self.filepath+'/'+self.qList[i])
            s = round(model.predit_quality().item(),2)

            self.scorelist.append(s)
            self.qList[i] = self.qList[i]+str(s).rjust(20," ")
            if self.pv == 100:
                self.StateShowLabel.setText("完成")
            else:
                self.pv += step
                self.progressBar.setValue(self.pv)
        self.slm.setStringList(self.qList)
        self.fileshowlist.setModel(self.slm)
        self.StateShowLabel.setText("打分完成！设置删除阈值！")

    def pngfilter(self,qlist,image_type=None):
        if image_type==None:
            # 不是png的文件不要
            for i in qlist[:]:
                # print(i[-4:])
                if i[-4:] != '.png' and i[-4:] != '.jpg':
                    qlist.remove(i)
        else:
            for i in qlist[:]:
                # print(i[-4:])
                if i[-4:] != '.'+image_type:
                    qlist.remove(i)
        return qlist


    def delete(self):
        #删除低于阈值图片
        filetype = self.comboBox.currentText()
        yuzhi = self.score.value()
        if yuzhi==0:
            self.StateShowLabel.setText("阈值为0！")
        else:
            for i,j in zip(self.scorelist[:], self.qList[:]):
                # print(i,j)
                if i < yuzhi:
                    # print(self.filepath + '/' + self.qList[i][:-20])
                    print(j[:-20].replace('.'+filetype ,'.NEF'))
                    os.remove(self.filepath + '/' + j[:-20].replace('.'+filetype,'.NEF'))
                    self.qList.remove(j)
            self.slm.setStringList(self.qList)
            self.fileshowlist.setModel(self.slm)
            self.StateShowLabel.setText("删除完毕！")

    def generate(self):
        #生成png或者jpg缩略图
        file_type = self.comboBox.currentText()
        print(file_type)
        self.generate_for_file(self.filepath,file_type)

    def generate_for_file(self,path,filetype):
        # 在这里修改存放raw文件的文件夹路径
        files = os.listdir(path)
        print('--批量转换开始--')
        for file in files:
            # 将文件名和后缀分成两部分
            portion = os.path.splitext(file)
            # 只处理.raw文件
            if portion[1] == '.NEF':
                realPath = path + '/'+file
                print(realPath)
                # 利用numpy的fromfile函数读取raw文件，并指定数据格式
                raw = rawpy.imread(realPath)
                image_rawpy = raw.postprocess()
                # 利用numpy中array的reshape函数将读取到的数据进行重新排列。
                # img = img.reshape(rows, cols, channels)
                # Convert RGB to BGR
                image_rawpy = image_rawpy[:, :, ::-1].copy()
                image_rawpy = cv2.resize(image_rawpy, (682, 512))
                # 将图像保存为tif格式
                fileName = portion[0] + '.'+ filetype
                tif_fileName = os.path.join(path, fileName)
                print(tif_fileName)
                cv2.imwrite(tif_fileName, image_rawpy)  # 1为tif无损压缩；修改这里的参数可以转为其他格式，具体参考上面两篇文章
                print(file + ' 转换完成')
            else:
                print(file + ' 不是.raw文件')

        print('--批量转换结束--')
        self.qList = self.pngfilter(os.listdir(self.filepath) , filetype)
        print(self.qList)
        if len(self.qList) == 0:
            self.slm.setStringList(["请选择有缩略图片的文件夹！"])
        else:
            self.slm.setStringList(self.qList)
        # self.fileshowlist.

        self.fileshowlist.setModel(self.slm)